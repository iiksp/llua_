local bit = require('bit')
bs={}
local lshift=bit.lshift

function bs:new(data)
	o={}
	o.data=data or {}
	
	if type(data[1]) == 'number' then
		t={}
		for k,v in pairs(data) do
			t[#t+1]=string.char(v)
		end
		o.data=t
	end
	
	o.i=1
	o.length=#data
	setmetatable(o,self)
	self.__index=self
	return o
end

function bs:move(step)
	if self.i + step > self.length + 1 then
		return false
	elseif self.i + step < 1 then
		return false
	else
		self.i = self.i + step
		return true
	end
end

function bs:pop(n)
	local t,isok=self:pop_raw(n)
	local res={}
	for k,v in pairs(t) do
		res[#res+1]=string.byte(v,1)
	end
	return res,isok
end

function bs:pop_raw(n)
	local t={unpack(self.data,self.i,self.i+n-1)}
	local isok=self:move(n)
	return t,isok
end

function bs:readByte()
	local t,isok = self:pop(1)
	return t[1],isok
end

function bs:readInt()
	local res=0
	local t=self:pop(4)
	for k,v in pairs(t) do res=res+lshift(v,8*(k-1)) end
    
    if res > 2^31 then
        res=res+2^31
        res=res%2^32
        res=res-2^31
    end
    
	return res
end

function bs:readStr()
	local res=''
	local size=self:readInt()
	--print("bs readStr size: " .. size)
	local t=self:pop_raw(size)
	
	for k,v in pairs(t) do res=res .. v end
	
	return res
end

function bs:bPos()
    return self.i-1
end


Stack={}

function Stack:new()
	local o = {}
	setmetatable(o,self)
	self.__index=self
	o.stack={}
	return o
end

function Stack:push(item)
	table.insert(self.stack,item)
end

function Stack:pop(n)
	local n=n or 1;
	local res={}
	
	for i=1,n,1 do
		res[#res+1]=table.remove(self.stack,#self.stack)
	end
	
	return unpack(res)
end 



kcjisaojeje17da653=function(a,b) return a%b end
kcjisaojejea2f65d7=function(a,b) return a==b end
kcjisaojejb8ffa3c2=function(a,b) return a~=b end
kcjisaojeje37f48a6=function(a,b) return a<=b end
kcjisaojejd56265d9=function(a,b) return a>=b end
kcjisaojejb0cd87ba=function(a,b) return a<b end
kcjisaojejff577802=function(a,b) return a>b end


function file2array(fn)
	local fileName = fn
	local file = assert(io.open(fileName, 'rb'))
	local t = {}
	repeat
	   local str = file:read(4*1024)
	   for c in (str or ''):gmatch'.' do
		  t[#t+1] = c
	   end
	until not str
	file:close()
	return t
end

function str2array(s)
	local t={}

	for c in (s or ''):gmatch'.' do
		t[#t+1]=c
	end

	return t
end

function dump_table(root, n)
    if n > 5 then
        return ""
    end
    n = n + 1
    if type(root) == "table" then
        local s = "{ "
		local entrys=0
        for k,v in pairs(root) do
			entrys = entrys + 1
            if type(k) ~= "number" then
                k = "\"" .. k .. "\""
            end
			
			if root == v then
				s = s .. "[" .. k .. "] = __self,"
			elseif entrys<30 then
				s = s .. "[" .. k .. "] = " .. dump_table(v, n) .. ","
			else
				s = s .. "[" .. k .. "] = ...,"
			end
        end
        return s .. "} "
    elseif type(root) == "string" then
        return "\"" .. root .. "\""
    else
        return tostring(root)
    end
end

function dumpTable(root)
	return dump_table(root,1)
end

function klcvjbidfog(op,name)
	f=
	function(self)
		local a,b=self.stack:pop(2)
		self.stack:push(op(b,a))
		--LOG('%s %d %d',name,b,a)
	end
	return f
end

function LOG(fmt,...)
	LOGPH(fmt,...)
end

function LOGPH(fmt,...)
    if type(fmt)~='string' then
        print(fmt,...)
	elseif select("#",...) == 0 then
		print(fmt)
    else
        print(fmt:format(...))
    end
end

plainBs=nil
encryptBs=nil
function getByte()
	local b,isok=plainBs:readByte()
	if not isok then
		return 0
	else
		return b
	end
end

stringsub=string.sub
lshift=bit.lshift
rshift=bit.rshift
band=bit.band
bor=bit.bor

function dw2Byte(dw,out)
	local res=out or {}
	res[#res+1]=bit.band(bit.rshift(dw,8*0),0xff)
	res[#res+1]=bit.band(bit.rshift(dw,8*1),0xff)
	res[#res+1]=bit.band(bit.rshift(dw,8*2),0xff)
	res[#res+1]=bit.band(bit.rshift(dw,8*3),0xff)
	return res
end

function putDword(dw)
	encryptBs = encryptBs or {}
	dw2Byte(dw,encryptBs)
	----LOG("%s",dumpTable(encryptBs))
end

function putByte(b)
	encryptBs = encryptBs or {}
	encryptBs[#encryptBs+1]=b
	----LOG("%s",dumpTable(encryptBs))
end

function saveEncrypt(fn)
	local f=io.open(fn,'wb')
	for k,v in pairs(encryptBs) do
		if type(v) == type(1) then
			f:write(string.char(v))
		else
			f:write(v)
		end
	end
end

fe825de6=0
dd2c3116=1
b5827525=2
a0e82ad9=3
d791738e=4
fcb1e160=5
a5b5e6d2=6
e17da653=7
Ud791738e=8
ba82e6cd=9
ff577802=10
b0cd87ba=11
d56265d9=12
e37f48a6=13
b8ffa3c2=14
ea2f65d7=15
c9011a8e=16
dd59703d=17

vm={}
jviwjeowjie={}
vm.weioeurwiuioiu=jviwjeowjie

function vm:new(bs,env)
	o={}
	setmetatable(o,self)
	self.__index=self
	o.bs=bs
	o.stack=Stack:new()
	o.env=env or {}
    setmetatable(o.env,_G)
    _G.__index=_G
	return o
end

function vm:exe()
	while true do
		local op,isok = self.bs:readByte()
        if not isok then break end
        
		--LOG(dumpTable(self.stack))
		--LOG("pos:%d op:%d",self.bs:bPos(),op)
		self.weioeurwiuioiu[op](self)
	end
    --LOG("finish running.")
end

function vm:b61531b9()
	local n=self.bs:readInt()
	--LOG('b61531b9 ' .. n)
	self.stack:push(n)
end


function vm:e5a13297()
	local s=self.bs:readStr()
	--LOG('e5a13297 '.. s)
	self.stack:push(self.env[s])
end


function vm:a115183a()
	local s=self.bs:readStr()
	--LOG('a115183a '.. s)
	self.stack:push(s)
end


function vm:set()
	local s=self.bs:readStr()
	local n=self.stack:pop()
	--LOG('set %s = %s',s,n)
	self.env[s]=n
end


function vm:c30c39a5()
	local a,b=self.stack:pop(2)
	self.stack:push(a+b)
	--LOG("c30c39a5 %d %d",a,b)
end


function vm:e9dcc004()
	local a,b=self.stack:pop(2)
	self.stack:push(b-a)
	--LOG("e9dcc004 %d - %d",b,a)
end


function vm:b8eb468b()
	local a,b=self.stack:pop(2)
	self.stack:push(a*b)
	--LOG("b8eb468b %d %d",a,b)
end


function vm:e29d3db5()
	local a,b=self.stack:pop(2)
	self.stack:push(b/a)
	--LOG("e29d3db5 %d %d",b,a)
end


function vm:ue9dcc004()
    local a=self.stack:pop()
    self.stack:push(-a)
    --LOG('ue9dcc004 %d',a)
end

function vm:fb6ea852()
	local cond=self.stack:pop()
	local offset=self.bs:readInt()
	if not cond or cond == 0 then
		self.bs:move(offset)
	end
	----LOG("ba82e6cd %s %d",cond,offset)
end

function vm:ddbe0eb4()
    local fn=self.bs:readStr()
    local func=self.env[fn]
    if type(func) == 'function' then
        argsn=self.stack:pop()
        args={}
        for i=1,argsn,1 do
            args[#args+1]=self.stack:pop()
        end
		----LOG("ddbe0eb4 %s %s",fn,dumpTable(args))
        res=func(unpack(args))
		self.stack:push(res)
    end
end

jviwjeowjie[c9011a8e]=vm.ddbe0eb4
jviwjeowjie[ba82e6cd]=vm.fb6ea852
jviwjeowjie[fe825de6]=vm.b61531b9
jviwjeowjie[dd2c3116]=vm.e5a13297
jviwjeowjie[dd59703d]=vm.a115183a
jviwjeowjie[b5827525]=vm.set
jviwjeowjie[a0e82ad9]=vm.c30c39a5
jviwjeowjie[d791738e]=vm.e9dcc004
jviwjeowjie[fcb1e160]=vm.b8eb468b
jviwjeowjie[a5b5e6d2]=vm.e29d3db5
jviwjeowjie[Ud791738e]=vm.ue9dcc004

jviwjeowjie[e17da653]=klcvjbidfog(kcjisaojeje17da653,'e17da653')
jviwjeowjie[ea2f65d7]=klcvjbidfog(kcjisaojejea2f65d7,'ea2f65d7')
jviwjeowjie[b8ffa3c2]=klcvjbidfog(kcjisaojejb8ffa3c2,'b8ffa3c2')
jviwjeowjie[e37f48a6]=klcvjbidfog(kcjisaojeje37f48a6,'e37f48a6')
jviwjeowjie[d56265d9]=klcvjbidfog(kcjisaojejd56265d9,'d56265d9')
jviwjeowjie[b0cd87ba]=klcvjbidfog(kcjisaojejb0cd87ba,'b0cd87ba')
jviwjeowjie[ff577802]=klcvjbidfog(kcjisaojejff577802,'ff577802')


function check(pt)
	--s=file2array('hashtest.txt')
	
	
	s=str2array(pt)
	plainBs=bs:new(s)

	--s=file2array('out.l')
	s={
    0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x07, 0x00, 0x00, 0x00, 0x67, 0x65, 0x74, 0x42, 0x79, 0x74,
    0x65, 0x02, 0x03, 0x00, 0x00, 0x00, 0x63, 0x75, 0x72, 0x11, 0x40, 0x00, 0x00, 0x00, 0x6C, 0x64,
    0x34, 0x4C, 0x69, 0x4F, 0x7A, 0x33, 0x46, 0x30, 0x62, 0x70, 0x79, 0x43, 0x4E, 0x67, 0x57, 0x51,
    0x42, 0x6B, 0x72, 0x36, 0x48, 0x61, 0x68, 0x47, 0x4D, 0x31, 0x66, 0x38, 0x35, 0x6F, 0x63, 0x4A,
    0x39, 0x2F, 0x56, 0x55, 0x65, 0x54, 0x45, 0x6D, 0x77, 0x71, 0x44, 0x50, 0x49, 0x73, 0x75, 0x76,
    0x6E, 0x5A, 0x59, 0x52, 0x4B, 0x6A, 0x58, 0x37, 0x2B, 0x41, 0x53, 0x74, 0x32, 0x78, 0x02, 0x03,
    0x00, 0x00, 0x00, 0x62, 0x36, 0x34, 0x01, 0x03, 0x00, 0x00, 0x00, 0x63, 0x75, 0x72, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x0E, 0x09, 0x3B, 0x06, 0x00, 0x00, 0x01, 0x03, 0x00, 0x00, 0x00, 0x63, 0x75,
    0x72, 0x02, 0x05, 0x00, 0x00, 0x00, 0x62, 0x79, 0x74, 0x65, 0x31, 0x01, 0x05, 0x00, 0x00, 0x00,
    0x62, 0x79, 0x74, 0x65, 0x31, 0x01, 0x05, 0x00, 0x00, 0x00, 0x62, 0x79, 0x74, 0x65, 0x31, 0x05,
    0x02, 0x04, 0x00, 0x00, 0x00, 0x72, 0x65, 0x73, 0x31, 0x01, 0x05, 0x00, 0x00, 0x00, 0x62, 0x79,
    0x74, 0x65, 0x31, 0x01, 0x04, 0x00, 0x00, 0x00, 0x72, 0x65, 0x73, 0x31, 0x05, 0x02, 0x04, 0x00,
    0x00, 0x00, 0x72, 0x65, 0x73, 0x31, 0x01, 0x04, 0x00, 0x00, 0x00, 0x72, 0x65, 0x73, 0x31, 0x00,
    0x0E, 0x00, 0x00, 0x00, 0x05, 0x02, 0x04, 0x00, 0x00, 0x00, 0x72, 0x65, 0x73, 0x31, 0x01, 0x04,
    0x00, 0x00, 0x00, 0x72, 0x65, 0x73, 0x31, 0x01, 0x05, 0x00, 0x00, 0x00, 0x62, 0x79, 0x74, 0x65,
    0x31, 0x01, 0x05, 0x00, 0x00, 0x00, 0x62, 0x79, 0x74, 0x65, 0x31, 0x05, 0x00, 0x05, 0x00, 0x00,
    0x00, 0x05, 0x03, 0x02, 0x04, 0x00, 0x00, 0x00, 0x72, 0x65, 0x73, 0x31, 0x01, 0x04, 0x00, 0x00,
    0x00, 0x72, 0x65, 0x73, 0x31, 0x01, 0x05, 0x00, 0x00, 0x00, 0x62, 0x79, 0x74, 0x65, 0x31, 0x00,
    0x0F, 0x00, 0x00, 0x00, 0x05, 0x03, 0x02, 0x04, 0x00, 0x00, 0x00, 0x72, 0x65, 0x73, 0x31, 0x01,
    0x04, 0x00, 0x00, 0x00, 0x72, 0x65, 0x73, 0x31, 0x00, 0x7D, 0x00, 0x00, 0x00, 0x03, 0x02, 0x04,
    0x00, 0x00, 0x00, 0x72, 0x65, 0x73, 0x31, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x01, 0x00, 0x00,
    0x00, 0x69, 0x01, 0x01, 0x00, 0x00, 0x00, 0x69, 0x00, 0x04, 0x00, 0x00, 0x00, 0x0B, 0x09, 0xBF,
    0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x69, 0x05, 0x01,
    0x04, 0x00, 0x00, 0x00, 0x72, 0x65, 0x73, 0x31, 0x00, 0x02, 0x00, 0x00, 0x00, 0x10, 0x06, 0x00,
    0x00, 0x00, 0x72, 0x73, 0x68, 0x69, 0x66, 0x74, 0x02, 0x04, 0x00, 0x00, 0x00, 0x74, 0x65, 0x6D,
    0x70, 0x00, 0x3F, 0x00, 0x00, 0x00, 0x01, 0x04, 0x00, 0x00, 0x00, 0x74, 0x65, 0x6D, 0x70, 0x00,
    0x02, 0x00, 0x00, 0x00, 0x10, 0x04, 0x00, 0x00, 0x00, 0x62, 0x61, 0x6E, 0x64, 0x00, 0x01, 0x00,
    0x00, 0x00, 0x03, 0x02, 0x04, 0x00, 0x00, 0x00, 0x74, 0x65, 0x6D, 0x70, 0x01, 0x04, 0x00, 0x00,
    0x00, 0x74, 0x65, 0x6D, 0x70, 0x01, 0x04, 0x00, 0x00, 0x00, 0x74, 0x65, 0x6D, 0x70, 0x01, 0x03,
    0x00, 0x00, 0x00, 0x62, 0x36, 0x34, 0x00, 0x03, 0x00, 0x00, 0x00, 0x10, 0x09, 0x00, 0x00, 0x00,
    0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x73, 0x75, 0x62, 0x02, 0x01, 0x00, 0x00, 0x00, 0x73, 0x01,
    0x01, 0x00, 0x00, 0x00, 0x73, 0x00, 0x01, 0x00, 0x00, 0x00, 0x10, 0x07, 0x00, 0x00, 0x00, 0x70,
    0x75, 0x74, 0x42, 0x79, 0x74, 0x65, 0x01, 0x01, 0x00, 0x00, 0x00, 0x69, 0x00, 0x01, 0x00, 0x00,
    0x00, 0x03, 0x02, 0x01, 0x00, 0x00, 0x00, 0x69, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x30, 0xFF,
    0xFF, 0xFF, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x05, 0x01, 0x04, 0x00,
    0x00, 0x00, 0x72, 0x65, 0x73, 0x31, 0x00, 0x02, 0x00, 0x00, 0x00, 0x10, 0x06, 0x00, 0x00, 0x00,
    0x72, 0x73, 0x68, 0x69, 0x66, 0x74, 0x00, 0x00, 0x01, 0x00, 0x00, 0x07, 0x02, 0x08, 0x00, 0x00,
    0x00, 0x73, 0x61, 0x76, 0x65, 0x62, 0x79, 0x74, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x07,
    0x00, 0x00, 0x00, 0x67, 0x65, 0x74, 0x42, 0x79, 0x74, 0x65, 0x02, 0x02, 0x00, 0x00, 0x00, 0x78,
    0x31, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x07, 0x00, 0x00, 0x00, 0x67, 0x65, 0x74, 0x42, 0x79,
    0x74, 0x65, 0x02, 0x02, 0x00, 0x00, 0x00, 0x78, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x07,
    0x00, 0x00, 0x00, 0x67, 0x65, 0x74, 0x42, 0x79, 0x74, 0x65, 0x02, 0x02, 0x00, 0x00, 0x00, 0x78,
    0x33, 0x01, 0x02, 0x00, 0x00, 0x00, 0x78, 0x31, 0x01, 0x02, 0x00, 0x00, 0x00, 0x78, 0x32, 0x00,
    0x00, 0x01, 0x00, 0x00, 0x05, 0x03, 0x01, 0x02, 0x00, 0x00, 0x00, 0x78, 0x33, 0x00, 0x00, 0x01,
    0x00, 0x00, 0x05, 0x00, 0x00, 0x01, 0x00, 0x00, 0x05, 0x03, 0x02, 0x01, 0x00, 0x00, 0x00, 0x78,
    0x01, 0x08, 0x00, 0x00, 0x00, 0x73, 0x61, 0x76, 0x65, 0x62, 0x79, 0x74, 0x65, 0x02, 0x04, 0x00,
    0x00, 0x00, 0x72, 0x65, 0x73, 0x32, 0x01, 0x04, 0x00, 0x00, 0x00, 0x72, 0x65, 0x73, 0x32, 0x01,
    0x01, 0x00, 0x00, 0x00, 0x78, 0x00, 0x95, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x01, 0x00, 0x00,
    0x05, 0x03, 0x02, 0x04, 0x00, 0x00, 0x00, 0x72, 0x65, 0x73, 0x32, 0x01, 0x04, 0x00, 0x00, 0x00,
    0x72, 0x65, 0x73, 0x32, 0x01, 0x01, 0x00, 0x00, 0x00, 0x78, 0x00, 0xD5, 0x00, 0x00, 0x00, 0x07,
    0x00, 0x00, 0x01, 0x00, 0x00, 0x05, 0x00, 0x00, 0x01, 0x00, 0x00, 0x05, 0x03, 0x02, 0x04, 0x00,
    0x00, 0x00, 0x72, 0x65, 0x73, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x01, 0x00, 0x00, 0x00,
    0x69, 0x01, 0x01, 0x00, 0x00, 0x00, 0x69, 0x00, 0x04, 0x00, 0x00, 0x00, 0x0B, 0x09, 0xBF, 0x00,
    0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x69, 0x05, 0x01, 0x04,
    0x00, 0x00, 0x00, 0x72, 0x65, 0x73, 0x32, 0x00, 0x02, 0x00, 0x00, 0x00, 0x10, 0x06, 0x00, 0x00,
    0x00, 0x72, 0x73, 0x68, 0x69, 0x66, 0x74, 0x02, 0x04, 0x00, 0x00, 0x00, 0x74, 0x65, 0x6D, 0x70,
    0x00, 0x3F, 0x00, 0x00, 0x00, 0x01, 0x04, 0x00, 0x00, 0x00, 0x74, 0x65, 0x6D, 0x70, 0x00, 0x02,
    0x00, 0x00, 0x00, 0x10, 0x04, 0x00, 0x00, 0x00, 0x62, 0x61, 0x6E, 0x64, 0x00, 0x01, 0x00, 0x00,
    0x00, 0x03, 0x02, 0x04, 0x00, 0x00, 0x00, 0x74, 0x65, 0x6D, 0x70, 0x01, 0x04, 0x00, 0x00, 0x00,
    0x74, 0x65, 0x6D, 0x70, 0x01, 0x04, 0x00, 0x00, 0x00, 0x74, 0x65, 0x6D, 0x70, 0x01, 0x03, 0x00,
    0x00, 0x00, 0x62, 0x36, 0x34, 0x00, 0x03, 0x00, 0x00, 0x00, 0x10, 0x09, 0x00, 0x00, 0x00, 0x73,
    0x74, 0x72, 0x69, 0x6E, 0x67, 0x73, 0x75, 0x62, 0x02, 0x01, 0x00, 0x00, 0x00, 0x73, 0x01, 0x01,
    0x00, 0x00, 0x00, 0x73, 0x00, 0x01, 0x00, 0x00, 0x00, 0x10, 0x07, 0x00, 0x00, 0x00, 0x70, 0x75,
    0x74, 0x42, 0x79, 0x74, 0x65, 0x01, 0x01, 0x00, 0x00, 0x00, 0x69, 0x00, 0x01, 0x00, 0x00, 0x00,
    0x03, 0x02, 0x01, 0x00, 0x00, 0x00, 0x69, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x30, 0xFF, 0xFF,
    0xFF, 0x01, 0x01, 0x00, 0x00, 0x00, 0x78, 0x00, 0x8E, 0x00, 0x00, 0x00, 0x07, 0x02, 0x04, 0x00,
    0x00, 0x00, 0x72, 0x65, 0x73, 0x32, 0x01, 0x04, 0x00, 0x00, 0x00, 0x72, 0x65, 0x73, 0x32, 0x01,
    0x01, 0x00, 0x00, 0x00, 0x78, 0x00, 0x42, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x01, 0x00, 0x00,
    0x05, 0x03, 0x02, 0x04, 0x00, 0x00, 0x00, 0x72, 0x65, 0x73, 0x32, 0x01, 0x04, 0x00, 0x00, 0x00,
    0x72, 0x65, 0x73, 0x32, 0x01, 0x01, 0x00, 0x00, 0x00, 0x78, 0x00, 0x79, 0x00, 0x00, 0x00, 0x07,
    0x00, 0x00, 0x01, 0x00, 0x00, 0x05, 0x00, 0x00, 0x01, 0x00, 0x00, 0x05, 0x03, 0x02, 0x04, 0x00,
    0x00, 0x00, 0x72, 0x65, 0x73, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x01, 0x00, 0x00, 0x00,
    0x69, 0x01, 0x01, 0x00, 0x00, 0x00, 0x69, 0x00, 0x04, 0x00, 0x00, 0x00, 0x0B, 0x09, 0xBF, 0x00,
    0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x69, 0x05, 0x01, 0x04,
    0x00, 0x00, 0x00, 0x72, 0x65, 0x73, 0x32, 0x00, 0x02, 0x00, 0x00, 0x00, 0x10, 0x06, 0x00, 0x00,
    0x00, 0x72, 0x73, 0x68, 0x69, 0x66, 0x74, 0x02, 0x04, 0x00, 0x00, 0x00, 0x74, 0x65, 0x6D, 0x70,
    0x00, 0x3F, 0x00, 0x00, 0x00, 0x01, 0x04, 0x00, 0x00, 0x00, 0x74, 0x65, 0x6D, 0x70, 0x00, 0x02,
    0x00, 0x00, 0x00, 0x10, 0x04, 0x00, 0x00, 0x00, 0x62, 0x61, 0x6E, 0x64, 0x00, 0x01, 0x00, 0x00,
    0x00, 0x03, 0x02, 0x04, 0x00, 0x00, 0x00, 0x74, 0x65, 0x6D, 0x70, 0x01, 0x04, 0x00, 0x00, 0x00,
    0x74, 0x65, 0x6D, 0x70, 0x01, 0x04, 0x00, 0x00, 0x00, 0x74, 0x65, 0x6D, 0x70, 0x01, 0x03, 0x00,
    0x00, 0x00, 0x62, 0x36, 0x34, 0x00, 0x03, 0x00, 0x00, 0x00, 0x10, 0x09, 0x00, 0x00, 0x00, 0x73,
    0x74, 0x72, 0x69, 0x6E, 0x67, 0x73, 0x75, 0x62, 0x02, 0x01, 0x00, 0x00, 0x00, 0x73, 0x01, 0x01,
    0x00, 0x00, 0x00, 0x73, 0x00, 0x01, 0x00, 0x00, 0x00, 0x10, 0x07, 0x00, 0x00, 0x00, 0x70, 0x75,
    0x74, 0x42, 0x79, 0x74, 0x65, 0x01, 0x01, 0x00, 0x00, 0x00, 0x69, 0x00, 0x01, 0x00, 0x00, 0x00,
    0x03, 0x02, 0x01, 0x00, 0x00, 0x00, 0x69, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x30, 0xFF, 0xFF,
    0xFF, 0x01, 0x01, 0x00, 0x00, 0x00, 0x78, 0x00, 0x8F, 0x00, 0x00, 0x00, 0x07, 0x02, 0x04, 0x00,
    0x00, 0x00, 0x72, 0x65, 0x73, 0x32, 0x01, 0x04, 0x00, 0x00, 0x00, 0x72, 0x65, 0x73, 0x32, 0x01,
    0x01, 0x00, 0x00, 0x00, 0x78, 0x00, 0x4E, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x01, 0x00, 0x00,
    0x05, 0x03, 0x02, 0x04, 0x00, 0x00, 0x00, 0x72, 0x65, 0x73, 0x32, 0x01, 0x04, 0x00, 0x00, 0x00,
    0x72, 0x65, 0x73, 0x32, 0x01, 0x01, 0x00, 0x00, 0x00, 0x78, 0x00, 0xF2, 0x00, 0x00, 0x00, 0x07,
    0x00, 0x00, 0x01, 0x00, 0x00, 0x05, 0x00, 0x00, 0x01, 0x00, 0x00, 0x05, 0x03, 0x02, 0x04, 0x00,
    0x00, 0x00, 0x72, 0x65, 0x73, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x01, 0x00, 0x00, 0x00,
    0x69, 0x01, 0x01, 0x00, 0x00, 0x00, 0x69, 0x00, 0x04, 0x00, 0x00, 0x00, 0x0B, 0x09, 0xBF, 0x00,
    0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x69, 0x05, 0x01, 0x04,
    0x00, 0x00, 0x00, 0x72, 0x65, 0x73, 0x32, 0x00, 0x02, 0x00, 0x00, 0x00, 0x10, 0x06, 0x00, 0x00,
    0x00, 0x72, 0x73, 0x68, 0x69, 0x66, 0x74, 0x02, 0x04, 0x00, 0x00, 0x00, 0x74, 0x65, 0x6D, 0x70,
    0x00, 0x3F, 0x00, 0x00, 0x00, 0x01, 0x04, 0x00, 0x00, 0x00, 0x74, 0x65, 0x6D, 0x70, 0x00, 0x02,
    0x00, 0x00, 0x00, 0x10, 0x04, 0x00, 0x00, 0x00, 0x62, 0x61, 0x6E, 0x64, 0x00, 0x01, 0x00, 0x00,
    0x00, 0x03, 0x02, 0x04, 0x00, 0x00, 0x00, 0x74, 0x65, 0x6D, 0x70, 0x01, 0x04, 0x00, 0x00, 0x00,
    0x74, 0x65, 0x6D, 0x70, 0x01, 0x04, 0x00, 0x00, 0x00, 0x74, 0x65, 0x6D, 0x70, 0x01, 0x03, 0x00,
    0x00, 0x00, 0x62, 0x36, 0x34, 0x00, 0x03, 0x00, 0x00, 0x00, 0x10, 0x09, 0x00, 0x00, 0x00, 0x73,
    0x74, 0x72, 0x69, 0x6E, 0x67, 0x73, 0x75, 0x62, 0x02, 0x01, 0x00, 0x00, 0x00, 0x73, 0x01, 0x01,
    0x00, 0x00, 0x00, 0x73, 0x00, 0x01, 0x00, 0x00, 0x00, 0x10, 0x07, 0x00, 0x00, 0x00, 0x70, 0x75,
    0x74, 0x42, 0x79, 0x74, 0x65, 0x01, 0x01, 0x00, 0x00, 0x00, 0x69, 0x00, 0x01, 0x00, 0x00, 0x00,
    0x03, 0x02, 0x01, 0x00, 0x00, 0x00, 0x69, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x30, 0xFF, 0xFF,
    0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x07, 0x00, 0x00, 0x00, 0x67, 0x65, 0x74, 0x42, 0x79,
    0x74, 0x65, 0x02, 0x03, 0x00, 0x00, 0x00, 0x63, 0x75, 0x72, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09,
    0xB2, 0xF9, 0xFF, 0xFF 
};

	----LOG("%s",dumpTable(s))
	bss=bs:new(s)
	lvm=vm:new(bss)
	lvm:exe()
	
	--saveEncrypt('encrypted.ph')
	dstRes='mCJ4lu/IDuuOVdLV8GvdlccdzuckNdckm/mddV90eXZylbLqJ75QdlZiMJ46rmL6k5gOlDY8uFZ0YG4EOrf0lEjN4bkMnF/X0mXWliucL5QHafQH1AEQlVQPTYkM58kMG3V3lik4WGlBFJiBOrf0lyLiWWZMcGi7Orf0lW/ViXWQVX/s1AEQlXkcd2Zi5rYiogfglF/ynF/ynF/y'
	for k,v in pairs(encryptBs) do
		if v ~= string.sub(dstRes,k,k) then
			LOGPH("fail!")
			return false
		end
		if k == string.len(dstRes) then
			LOGPH("success")
			return true
		end
	end
end

--check('fsdk9090fjsl')